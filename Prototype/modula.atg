(* ---------------------------------------------------------------------- *)
(*  COMPILER MODULA                                                       *)
(*                                                                        *)
(*  USEAGE : This module contains the attributed grammar for use with     *)
(*           Coco/R compiler front-end generator.                       *)
(*                                                                        *)
(*  COPYRIGHT    : (C) The Free Modula-2 Group 2005                       *)
(*  AUTHOR       : ScotaSys		DATE WRITTEN 15/05/2005                 *)
(* ---------------------------------------------------------------------- *)
COMPILER Modula

CHARACTERS
  eol      = CHR(13) .
  letter   = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz" .
  octDigit = "01234567" .
  digit    = octDigit + '89'.
  hexDigit = digit + 'ABCDEF'.
  noQuote1 = ANY - "'" - eol .
  noQuote2 = ANY - '"' - eol .

IGNORE  CHR(9) .. CHR(13)

COMMENTS
  FROM '(*' TO '*)' NESTED

TOKENS
  identifier =  letter { letter | digit }.
  integer =    digit { digit }
             | digit { digit }  CONTEXT ("..")
             | octDigit { octDigit } ("B" | "C")
             | digit { hexDigit } "H".
  real    =  digit { digit } "." { digit }
             [ "E" [ "+" | "-" ] digit { digit } ].
  string  =    "'" { noQuote1 } "'"
             | '"' { noQuote2 } '"'.

PRODUCTIONS

Modula = [ "DEFINITION" "MODULE" | "IMPLEMENTATION" "MODULE" | "MODULE" ]
         ModuleName [ImportBlock] [CONSTBlock] [TYPEBlock] [VARBlock]
         {Procedures} "BEGIN" {Statements} "END" ModuleName "." .

ModuleName = identifier .
         
ImportBlock = "FROM" identifier ImportList ";" .
ImportList  = identifier {"," identifier} .

CONSTBlock  = "CONST" {identifier "=" ConstDeclaration ";"} .
TYPEBlock   = "TYPE"  {identifier ":" TypeDeclaration ";"} .
VARBlock    = "VAR"   {identifier ":" TypeDeclaration ";"} .

Procedures  = "PROCEDURE" ProcedureName "(" {ParameterList} ")" [":" ReturnType] ";" 
               [CONSTBlock] [TYPEBlock] [VARBlock] "BEGIN" {Statements} 
               "END" ProcedureName ";" .
ProcedureName = identifier .
ParameterList = ["VAR"] identifier ":" Type ";" .
ReturnType    = Expression .

ConstDeclaration = Expression .

TypeDeclaration  = identifier "=" Type .
Type             = SimpleType | ArrayType   | RecordType 
                   | SetType  | PointerType | Procedures .

SimpleType    = QualIdent | Enumeration | SubRange .
ArrayType     = "ARRAY" SimpleType {"," SimpleType} "OF" Type .
RecordType    = "RECORD" {identifier ":" Type ";"} "END" ";" .
SetType       = "SET" "OF" QualIdent "{" SetMembers "}" .
SetMembers    = Element {"," Element} .
Element       = SimpleType .
PointerType   = "POINTER" "TO" Type .

QualIdent     = identifier {"." identifier} . 
Enumeration   = "(" identifier {"," identifier} ")" .
SubRange      = "[" Expression ".." Expression "]" .

(* Assingment and ProcedureCall contained in first expression *)
Statements    = QualIdent [ ["^"]":=" Expression | "(" ActualParameters ")" ] ";"
                | CaseStatement  | EmptyStatement | ForStatement 
                | IfStatement    | LoopStatement  | RepeatStatement 
                | WhileStatement | WithStatement .
               
CaseStatement   = "CASE" Expression "OF" CaseLabelBlock {"|" CaseLabelBlock}
                  ["ELSE" Statements] "END" ";".
CaseLabelBlock  = CaseLabel ":" Statements .
CaseLabel       = Expression [".." Expression].

EmptyStatement  = ";" .
ForStatement    = "FOR" identifier ":=" Expression "TO" Expression 
                  ["BY" ConstExpression] "DO" Statements "END" ";" .
ConstExpression = Expression .           
       
IfStatement     = "IF" Expression "THEN" Statements
                  {"ELSIF" Expression "THEN" Statements}
                  ["ELSE" Statements] "END" ";" .
                  
LoopStatement   = "LOOP" Statements "END" ";" .

RepeatStatement = "REPEAT" Statements "UNTIL" Expression "END" ";" .

WhileStatement  = "WHILE" Expression "DO" Statements "END" ";" .

WithStatement   = "WITH" QualIdent "DO" Statements "END" ";" .
ActualParameters = Expression { "," Expression } .

Expression      = SimpleExpression { Relation SimpleExpression } .
SimpleExpression = ["+" | "-"] Term {TermOperator Term}.
Relation        = "=" | "#"| "<" | "<=" | "<>" | ">" | ">=" | "IN" . 

TermOperator    = "+" | "-" | "OR" .
Term            = Factor {FactorOperator Factor} .
                        (* ---- Factor contains Procedure call in last option ---- *)
Factor          = "(" Expression ")" | "NOT" Factor | Number | string 
                  | QualIdent "(" ActualParameters ")" ";" . 
FactorOperator     = "*" | "/" | "DIV" | "MOD" | "AND" .
Number          = integer | real .

END Modula.
(* ---------------------------------------------------------------------
       This software and its source code is released under the
                   GNU General Public Licence
        Copyright (C) 1989, 1991 Free Software Foundation, Inc.
         59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
   -------------------------------------------------------------------- *)